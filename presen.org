#+title: {プランニング, Lisp} × {マクロ, ユーティリティ, Utility Problem}
#+author: 
#+include: "head.org"
#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: jpg file:img/%s.jpg

# #+HTML: <script type="text/javascript" src="js/mathjaxconf.js"></script>

#+BEGIN_outline-text-1
#+BEGIN_CENTER
#+BEGIN_LARGER
*浅井 政太郎 (guicho2.71828)*
#+END_LARGER

東京大学 総合文化研究科 博士一年

分野: 人工知能 推論・探索

高速プランニングソルバの開発

教授もLisper (CL-MPIの作者) → http://metahack.org

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
[[png:astro]]
#+END_SPAN6
#+BEGIN_SPAN6
[[png:rescue]]
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

#+END_CENTER

#+BEGIN_RESUME
My name is Masataro Asai, in this presentation, as other people do, Id like to 
give a brief introduction to my research field and what I do.
#+END_RESUME
#+END_outline-text-1

* 章立て

Total 20分

+ Lisp × {マクロ, ユーティリティ, Utility Problem}
  + マクロとはどういう概念か?
  + Common Lisp のマクロ
  + Common Lisp のユーティリティ
  + Common Lisp の Utility Problem
  + Common Lisp での Utility Problem との闘いの歴史
+ プランニング × {マクロ, ユーティリティ, Utility Problem}
  + 自動プランニングへのイントロダクション
  + 自動プランニングの技術
  + プランニングでのマクロ
  + プランニングでの Utility Problem
+ マクロの学習
  + プランニングでの マクロの学習
  + Lisp マクロの学習?
  + Future Direction --- Utility Problem をどう解くのか?

* Lisp × {マクロ, ユーティリティ, Utility Problem}

マクロとはどういう概念か?

Common Lisp のマクロ

Common Lisp のユーティリティ

Common Lisp の Utility Problem

** マクロとは広義にはどういう概念か?

 #+BEGIN_CONTAINER-FLUID
 #+BEGIN_ROW-FLUID
 #+BEGIN_SPAN7
 マクロという「名称」はLispだけ? → *NO.*

 #+BEGIN_ALIGNRIGHT
 → *何らかの一般性を有する概念*
 #+END_ALIGNRIGHT
 #+END_SPAN7
 #+BEGIN_SPAN5
 | Lisp     | マクロ           |
 | C        | マクロ           |
 | エクセル | マクロ           |
 | 秀丸     | マクロ           |
 | Emacs    | キーボードマクロ |
 #+END_SPAN5
 #+END_ROW-FLUID
 #+BEGIN_ROW-FLUID
 　
 #+END_ROW-FLUID
 #+BEGIN_ROW-FLUID
 #+BEGIN_SPAN5
 マクロ = 

 *複数の命令列に展開されるもの*
 #+END_SPAN5
 #+BEGIN_SPAN7
 =with-open-file= 作業X 

 → =open= + =unwind-protect= + 作業X + =close=
 #+END_SPAN7
 #+END_ROW-FLUID
 #+END_CONTAINER-FLUID

** 様々なマクロ (おさらい)

 | キーボードマクロ         | C                    | Lisp                       |
 | (emacs, 秀丸 etc.)       | マクロ               | マクロ                     |
 |--------------------------+----------------------+----------------------------|
 | キーボード入力の列に展開 | 文字列に展開         | *木構造に展開*             |
 |--------------------------+----------------------+----------------------------|
 | 入力をパースできない     | 入力をパース出来ない | *入力をパース出来る*       |
 |--------------------------+----------------------+----------------------------|
 | 文字列ベース             | 文字列ベース         | *シンボルベース*           |
 |--------------------------+----------------------+----------------------------|
 | よく使うパターンの       | よく使うパターンの   | よく使うパターンの         |
 | ショートカット           | ショートカット       | ショートカット             |
 |--------------------------+----------------------+----------------------------|
 |                          |                      | *言語となり思考を規定する* |
 |--------------------------+----------------------+----------------------------|

** Common Lisp の関数とマクロ

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
 with-gensyms -- マクロ

 once-only -- マクロ

 ensure-list -- 関数

 symbolicate -- 関数
#+END_SPAN6
#+BEGIN_SPAN6
 プログラマに与える恩恵は同じ

 #+BEGIN_ALIGNRIGHT
  (*抽象化の手段*)
 #+END_ALIGNRIGHT
 
 適用対象・状況・呼び方が異なるだけ

 #+BEGIN_ALIGNRIGHT
 *→ どちらも広義のマクロ*
 #+END_ALIGNRIGHT
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

** Common Lisp における? ユーティリティ ＃とは

 #+BEGIN_QUOTE
 --- is a *small*, *context-free*, *useful* bit of code that is
 *self-contained*, and *doesn't warrant an entire new library*.

 #+BEGIN_ALIGNRIGHT
 /Robert Smith, Quickutil: A New Software Distribution Paradigm/
 #+END_ALIGNRIGHT
 #+END_QUOTE

 + Small :: 1つか2つの独立した機能を持つ関数である。
 + Self-contained :: 外部ライブラリに依存しない。
 + Context-free :: 使い道が限定されない。
 + Useful :: 主観的だが、とにかく「便利」

** Common Lisp における Utility Problem ＃とは

#+BEGIN_LARGER
*Utility Library Problem.*
#+END_LARGER

 # [[http://blog.8arrow.org/entry/20130617/1371458729][Lispユーティリティの新しい解決案「Quickutil」]]

 # [[http://web.archive.org/web/20140711172208/http://symbo1ics.com/blog/?p=1936][Quickutil: A New Software Distribution Paradigm]]

 #+BEGIN_QUOTE
 #+BEGIN_SRC
 Common Lispプログラマなら以下のようなことを
 思ったことがあるのではないですかね。

     Alexandriaは大きすぎる…
 
     なんでAlexandriaにあの関数ないんだよ…

     aandのためだけにarnesi…

     split-sequence…

 そんな微妙な行き違いの結果、みんな
 オレオレユーティリティ集を作るみたいなことが発生する。
 #+END_SRC
 #+BEGIN_ALIGNRIGHT
 /深町英太郎: Lispユーティリティの新しい解決案「Quickutil」/
 #+END_ALIGNRIGHT
 #+END_QUOTE

*一つのユーティリティ関数のために巨大なシステムをロードするのは嫌!*

*複数のユーティリティ関数が複数のシステムにバラけている!*

** Common Lisp での Utility Problem との闘いの歴史

+ 1970s --- そもそも処理系自体が乱立状態
+ 1984 --- CLtL1
+ 1990 --- CLtL2
+ 1994 --- ANSI Common Lisp が成立、普及
+ 1991 --- /Portable utilities for Common Lisp user guide & implementation notes/
+ だれそれが作ったオレオレ・ユーティリティが乱立
+ 2002 --- cl-utilities (google で期間指定して調べるとわかる)
+ 2006 --- Alexandria (他の関数をいろいろまとめた)
+ 2013 --- QuickUtil
  
  既存の有名なユーティリティ関数を集めたライブラリ
    
  新規性 : *個別のユーティリティを一つ一つロードできる*
  
  ☺ 誰でもすぐに追加できる

  様々な議論 @ reddit ... e.g. "over-engineered"

  アイディアは良いのに、いまだ killer app にはなっていない → なぜ?

* 

#+BEGIN_XLARGE
自分の研究から
#+BEGIN_CENTER
使える知見は
#+END_CENTER
#+BEGIN_ALIGNRIGHT
ないだろうか??
#+END_ALIGNRIGHT
#+END_XLARGE

* AI Topics -- プランニングへのイントロダクション
** 誰?

 #+BEGIN_CONTAINER-FLUID
 #+BEGIN_ROW-FLUID
 #+BEGIN_SPAN6
 [[png:astro/1]]
 #+END_SPAN6
 #+BEGIN_SPAN6
 [[png:rescue/1]]
 #+END_SPAN6
 #+END_ROW-FLUID
 #+END_CONTAINER-FLUID

  #+BEGIN_RESUME
  And let me introduce these robots.
  The guy in the left is Astro boy.
  #+END_RESUME

*** 誰?

 #+BEGIN_CONTAINER-FLUID
 #+BEGIN_ROW-FLUID
 #+BEGIN_SPAN6
 [[png:astro/2]]
 #+END_SPAN6
 #+BEGIN_SPAN6
 [[png:rescue/1]]
 #+END_SPAN6
 #+END_ROW-FLUID
 #+END_CONTAINER-FLUID

 #+BEGIN_RESUME
 As you know, he is a famous manga superhero invented by Tezuka Osamu in 50s,
 #+END_RESUME

*** 誰?

  #+BEGIN_CONTAINER-FLUID
  #+BEGIN_ROW-FLUID
  #+BEGIN_SPAN6
  [[png:astro/final]]
  #+END_SPAN6
  #+BEGIN_SPAN6
  [[png:rescue/1]]
  #+END_SPAN6
  #+END_ROW-FLUID
  #+END_CONTAINER-FLUID

 #+BEGIN_RESUME
 and he can think, hear, speak, act. he also has emotions.
 #+END_RESUME

*** 誰?

  #+BEGIN_CONTAINER-FLUID
  #+BEGIN_ROW-FLUID
  #+BEGIN_SPAN6
  [[png:astro/final]]
  #+END_SPAN6
  #+BEGIN_SPAN6
  [[png:rescue/2]]
  #+END_SPAN6
  #+END_ROW-FLUID
  #+END_CONTAINER-FLUID

 #+BEGIN_RESUME
  In contrast, the guy in the right is a real robot that is actually in use @ fukuoka prefecture for the rescue purpose..
  His name is T-52 Enryu, developped by a Japanese company Temzak.
  He is huge and powerful -- about 4 meters in height and can carry things which is as heavy as 500kg.
  Well, so, in a sense, he is also a superhero in the real disastrous situation.
 #+END_RESUME

*** 誰?

  #+BEGIN_CONTAINER-FLUID
  #+BEGIN_ROW-FLUID
  #+BEGIN_SPAN6
  [[png:astro/final]]
  #+END_SPAN6
  #+BEGIN_SPAN6
  [[png:rescue/3]]
  #+END_SPAN6
  #+END_ROW-FLUID
  #+END_CONTAINER-FLUID

 #+BEGIN_RESUME
 But does he have feelings or can he think? Can he even move around by his own?
 #+END_RESUME

*** 誰?

  #+BEGIN_CONTAINER-FLUID
  #+BEGIN_ROW-FLUID
  #+BEGIN_SPAN6
  [[png:astro/final]]
  #+END_SPAN6
  #+BEGIN_SPAN6
  [[png:rescue/final]]
  #+END_SPAN6
  #+END_ROW-FLUID
  #+END_CONTAINER-FLUID

 #+BEGIN_RESUME
 No. It requires full human intervention --- it is indeed operated by a
 driver who gets in or by a remote control. It is more like a
 super-sophisticated shovel car.
 #+END_RESUME

** 実際の大規模災害では非実用的 --- 操縦士が足りない!

 #+BEGIN_CONTAINER-FLUID
 #+BEGIN_ROW-FLUID
 #+BEGIN_SPAN2
 [[png:rescue]]
 [[png:rescue]]
 [[png:rescue]]
 [[png:silent]]
 #+END_SPAN2
 #+BEGIN_SPAN10
 [[jpg:static/tsunami]]
 #+END_SPAN10
 #+END_ROW-FLUID
 #+END_CONTAINER-FLUID

 #+BEGIN_LARGER
 #+BEGIN_ALIGNRIGHT
 + そのままでは役に立たない!
 #+END_ALIGNRIGHT
 #+END_LARGER

 #+BEGIN_RESUME
 Now the problem is : It's ok in small accidents but is impractical in the real, massive 
 natural disaster which frequently occurs in Japan.
 The key resource is human ---
 These special purpose vehicles require human intervention,
 thus they are useless without trained operators.
 #+END_RESUME

*** 操縦士を増やせない -- Human Resource and Training

 #+BEGIN_CONTAINER-FLUID
 #+BEGIN_ROW-FLUID
 #+BEGIN_SPAN4
  [[png:rescue/1]]
 #+END_SPAN4
 #+BEGIN_SPAN8

   + ✘ /時間/ がかかる :: 訓練に ＞100時間, *必要な時だけ増やす* のは不可能
   + ✘ /￥￥￥￥/ がかかる :: 訓練官、訓練場所、訓練用具
   + ✘ 技術は /維持が重要/ :: 定期的な再訓練、長期的コスト、さらなるマニー
   + ✘ 平時は /無駄/ な技術 :: 普段は意味がない -- 無駄なマニー!
 #+END_SPAN8
 #+END_ROW-FLUID
 #+END_CONTAINER-FLUID

 #+BEGIN_RESUME
 In a natural disaster, we need as many experienced operators as possible.
 However, it is virtually impossible due to several reasons. 

 First, training takes time.
 It is impossible to quickly increase the number of operators as needed, at the time of disaster.

 Second, the money matters.
 Training a person costs a lot of money, including: the cost of maintaining
 a training center, the cost of additional vehicles for training, the cost
 of training the trainers, wages for trainers, etc.

 Third, Skills need to be updated and maintained.
 You know, how about preparing the large number of operators in advance?
 No, the society cannot torelate the cost of keep training them.
 Operators may lose the skills and skills may become outdated.

 Finally, in a normal situation, those skills are useless.
 It forces the society to waste a great amount of extra money.
 #+END_RESUME

** だからこそ: 自動プランナ Automated Planner

 [[png:planning/1]]

 #+BEGIN_RESUME
 研究テーマのプランニングは、ロボットに、人間の助けを借りず、いかに自律して行動させるかを扱います。
 これをモデル化したプランニング問題は、具体的な行動の列を求める 組合せ最適化問題です。

 プランニング問題のタスクは、
 センサーから初期状態とゴールを受け取って、被災者を助ける正しい手順を出力することです。

 たとえば、この図では男性が瓦礫に埋まって助けを求めています。
 プランニング機能のあるロボットは、コレに対して「男性を助けよ」という大まかな指示を受けます。
 #+END_RESUME

** だからこそ: 自動プランナ Automated Planner

 [[png:planning/2]]

 #+BEGIN_RESUME
 指示の内容には、図のように初期状態とゴール、許可された行動のリストが入っています。
 ロボットは、自動プランニングにより、人間の代わりに適切な行動を組み立てて、ゴールを自動で達成します。
 #+END_RESUME

** だからこそ: 自動プランナ Automated Planner

 [[png:planning/final]]

 #+BEGIN_RESUME
 プランニングは汎用な枠組みなので、災害救助以外にも様々な問題に適用することができます。
 現実の応用例では「宇宙探査機運行問題」や「企業ネットワーク脆弱性問題」も表現できます。

 このように、プランニングは、難しい問題を汎用性を失わずに解くことを目指します。
 #+END_RESUME

 # 自動運転事故:
 # ポリシーが決まっていないならそういうものは作るべきではない
 # 危険だ

 # しかし自動運転は自分の扱うプランニングとは違うので実は困らない

 # ゴール設定は人間がやればいい
 # ターゲットを決めた上で
 # 全力で考えるのがプランニングの技術
 # 効用関数を決めるのは人間
 # いかにそれを実現するか
 # あくまで命令に従うロボットであることを強調

 # ドメインは消す
 # アプリケーション
 # 
 # coreまでは実例
 # 災害援助は将来
 # 完全に分離
 # 
 # 掃除ドメインをメインに

 # ** プランニングとは?
 # 
 # [[png:planning-4room]]

 # #+BEGIN_RESUME
 # 同じ掃除ドメインの4部屋インスタンスも表現できますし、
 # 現実の応用例では「宇宙探査ドメイン」も表現できます。
 # 
 # このように、プランニングは、難しい問題を汎用性を失わずに解くことを目指します。
 # 
 # 仮に将来、写真のような救助ロボットにプランニングソルバを組み込めば、
 # 被災者を発見した時に適切な行動を自ら選択できるようになるかもしれません。
 # #+END_RESUME

** AIの使いドコロ  :noexport:

 + 人では不可能な作業の代替 :: 危険な環境, 宇宙空間・深海, 24時間対応, マイクロ秒応答
 + コストのかかる専門技師の代替・自動化 :: 機械工作, 人工衛星運営(専門家会議の時給が高い!)
 + ミスの許されない完璧な理論保証の求められる問題の求解 :: 半導体のバグ検証システム(生産を始めると止められない)

** AIと自動プランニング の位置づけ -- /理論/ と /実応用/ の中間  :noexport:

 緑は /理論/ 、オレンジは /実応用/ 、 AI はその橋渡し (どれともかぶらない部分もある)

 #+BEGIN_RESUME
 Automated Planning is a branch of Aritificial Intelligence. 

 It shares a lot of technology with Operations Research and Theoretical
 Computer Science, and is considered a bridge between pure theory and
 pure applications.
 #+END_RESUME

 [[png:planning2]]

** Q. はやりのDeep Learningとの違いは?

 A. 抽象化レイヤが違う

 #+BEGIN_CONTAINER-FLUID
 #+BEGIN_ROW-FLUID
 #+BEGIN_SPAN6
 *機械学習・Neural Networks* 
 
 for *認識・反射*
 + 入力 は *Subsymbolic*
   
   画像、音声、非構造化テキスト
 + *1タイムステップ*:
   
   　 *_直後_ の行動の決定*
   #+BEGIN_SMALLER
   Reflex Agent = 脊髄反射
   
   *パブロフの犬* : 餌→よだれ
   
   *自動運転* : 赤信号,人 → 止まる.
   
   *ファナック産業ロボ* : 画像 → モータ出力

   *翻訳* : 文章 → 文章
   #+END_SMALLER
   ☺ 効率よく 1-to-1 mapping
   
   ☹ 単純作業
 #+END_SPAN6
 #+BEGIN_SPAN6
 *推論・探索*

 for *プランニング・ゲーム・定理証明*
 + 入出力は *Symbolic*
   
   論理 オブジェクト ルール
 + *>1000タイムステップ:*

   　 *_未来に渡る_ 戦略の決定*
   
   　 (戦略 = 行動の *列や木*)
   #+BEGIN_SMALLER
   *レスキューロボ* : 現実 = 難解パズル

   *囲碁,将棋* : ゴール = 勝利

   *証明器* : ゴール = QED

   *コンパイラ* : 命令列の生成
   #+END_SMALLER
   #+BEGIN_LARGER
   ☺ 多数の論理の組み合わせ
   #+END_LARGER
 #+END_SPAN6
 #+END_ROW-FLUID
 #+END_CONTAINER-FLUID

#+BEGIN_ALIGNRIGHT
AlphaGo = Subsymbolic (DLNNによる評価関数の学習) + Symbolic (UCT-MCTSによる探索)
#+END_ALIGNRIGHT

#+BEGIN_NOTE
DLNN: Deep Learning Neural Network

UCT-MCTS: Monte Carlo Tree Search + Universal Confidence Bound applied on Trees
#+END_NOTE

** Reflex Agent vs Goal-based Agents :noexport:

 [[png:planning-deeplearning]]

 AI's Ethics? --- subject to the "users"

* プランニング問題 (決定的,完全情報) -- Blocksworld

[[png:plan]]

** アクション = 条件付き状態遷移

#+BEGIN_CENTER
#+BEGIN_XLARGE
(move ?X ?Y)
#+END_XLARGE
#+END_CENTER


#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN7
#+BEGIN_QUOTE
*前提条件*

積み木 *?X* の上に何もなく (1)

積み木 *?Y* の上にも何もない (2)

*追加効果*

⇒ *?X* が *?Y* の上に移動する。(3)

*削除効果*

⇒ *?Y* は clear ではなくなる。(4)
#+END_QUOTE
#+END_SPAN7
#+BEGIN_SPAN5
#+BEGIN_SRC lisp
(:action move
 :parameters (?X ?Y)
 :preconditions
   (and (clear ?X)   ; (1)
        (clear ?Y))  ; (2)

 :effect
   (and (on ?X ?Y)   ; (3)
        (not         ; (4)
         (clear ?Y))))
#+END_SRC
#+END_SPAN5
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

変数 *?X*, *?Y* などに値 *A*, *B* などを適用して使う

#+BEGIN_NOTE
*PDDL* : Planning Domain Description Language -- S式ベースの記述言語
#+END_NOTE

** プランニング = グラフ探索

*ノード* : 状態 = 命題の集合 ⇒ =(on A B)=, =(clear A)= など

*辺*     : アクション ⇒ =(move A B)= 等

[[png:graph]]

# #+BEGIN_CONTAINER-FLUID
# #+BEGIN_ROW-FLUID
# #+BEGIN_SPAN6
# # + ヒューリスティック探索 A*
# # + State-of-the-Art *1
# #+END_SPAN6
# #+BEGIN_SPAN6
# # #+attr_html: :width 50%
# #+END_SPAN6
# #+END_ROW-FLUID
# #+END_CONTAINER-FLUID

#+BEGIN_NOTE
*1 [Helmert, 2006] [Richter, 2010]
#+END_NOTE
  
* プランニング × {マクロ, ユーティリティ, Utility Problem}

プランニングでのマクロ

プランニングでの Utility Problem

** プランニングでの マクロ: マクロ・オペレータ


 #+BEGIN_CONTAINER-FLUID
 #+BEGIN_ROW-FLUID
 #+BEGIN_SPAN6
 #+BEGIN_LARGER
 #+BEGIN_CENTER
 アクションの列を1つのアクションとして融合

 *(move a b) (move b c)*
 #+END_CENTER

 #+BEGIN_ALIGNRIGHT
 → *(move-move a b c)*
 #+END_ALIGNRIGHT
 #+END_LARGER
 #+END_SPAN6
 #+BEGIN_SPAN6
 | ABSTRIPS | (Sacerdoti, '71)      |
 | MORRIS   | (Minton, '85)         |
 | PRODIGY  | (Minton, '89)         |
 | ...      |                       |
 | Macro-FF | (Botea et al. '05)    |
 | Wizard   | (Newton et al. '07)   |
 | Marvin   | (Coles and Smith '07) |
 | MUM      | (Chrpa et. al. '14)   |
 #+END_SPAN6
 #+END_ROW-FLUID
 #+END_CONTAINER-FLUID

** アクション = 条件付き状態遷移

#+BEGIN_CENTER
#+BEGIN_XLARGE
(move ?X ?Y)
#+END_XLARGE
#+END_CENTER


#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN7
#+BEGIN_QUOTE
*前提条件*

積み木 *?X* の上に何もなく (1)

積み木 *?Y* の上にも何もない (2)

*追加効果*

⇒ *?X* が *?Y* の上に移動する。(3)

*削除効果*

⇒ *?Y* は clear ではなくなる。(4)
#+END_QUOTE
#+END_SPAN7
#+BEGIN_SPAN5
#+BEGIN_SRC lisp
(:action move
 :parameters (?X ?Y)
 :preconditions
   (and (clear ?X)   ; (1)
        (clear ?Y))  ; (2)

 :effect
   (and (on ?X ?Y)   ; (3)
        (not         ; (4)
         (clear ?Y))))
#+END_SRC
#+END_SPAN5
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

** マクロの作成

#+BEGIN_CENTER
| /          | <           | >           | <> | <>                     |
|            | <c>         | <c>         |    | <c>                    |
| actions    | a_1         | a_2         |    | m=a_1 + a_2            |
|------------+-------------+-------------+----+------------------------|
| parameters | params_1    | params_2    |    | 　　　　　　　　　　　 |
|            | X,Y         | Y,Z         |    |                        |
| 前提条件   | pre_1       | pre_2       |    |                        |
|            | clear,clear | clear,clear |    |                        |
| 追加効果   | e^+_1       | e^+_2       |    |                        |
|            | on          | on          |    |                        |
| 削除効果   | e^-_1       | e^-_2       |    |                        |
|            | clear       | clear       |    |                        |
#+END_CENTER

*** マクロの作成

#+BEGIN_CENTER
| /          | <           | >           | <> | <>                     |
|            | <c>         | <c>         |    | <c>                    |
| actions    | a_1         | a_2         |    | m=a_1 + a_2            |
|------------+-------------+-------------+----+------------------------|
| parameters | params_1    | params_2    |    | params_1 \cup params_2 |
|            | X,Y         | Y,Z         |    | X,Y,Z                  |
| 前提条件   | pre_1       | pre_2       |    |                        |
|            | clear,clear | clear,clear |    |                        |
| 追加効果   | e^+_1       | e^+_2       |    |                        |
|            | on          | on          |    |                        |
| 削除効果   | e^-_1       | e^-_2       |    |                        |
|            | clear,clear | clear,clear |    |                        |
#+END_CENTER

#+BEGIN_ALIGNRIGHT
　.
#+END_ALIGNRIGHT

#+BEGIN_RESUME
For example, the new parameters are approximately a union of the parameters
of the base actions.
#+END_RESUME

*** マクロの作成

#+BEGIN_CENTER
| /          | <           | >           | <> | <>                                 |
|            | <c>         | <c>         |    | <c>                                |
| actions    | a_1         | a_2         |    | m=a_1 + a_2                        |
|------------+-------------+-------------+----+------------------------------------|
| parameters | params_1    | params_2    |    | params_1 \cup params_2             |
|            | X,Y         | Y,Z         |    | X,Y,Z                              |
| 前提条件   | pre_1       | pre_2       |    | pre_1 \cup (pre_2 \setminus e^+_1) |
|            | clear,clear | clear,clear |    |                                    |
| 追加効果   | e^+_1       | e^+_2       |    | (e^+_1 \setminus e^-_2) \cup e^+_2 |
|            | on          | on          |    |                                    |
| 削除効果   | e^-_1       | e^-_2       |    | (e^-_1 \setminus e^+_2) \cup e^-_2 |
|            | clear,clear | clear,clear |    |                                    |
#+END_CENTER

#+BEGIN_ALIGNRIGHT
打ち消し合う効果は消える
#+END_ALIGNRIGHT

#+BEGIN_RESUME
the preconditions and effects are added or subtracted
in order to cancell and hide the intermediate effects.
#+END_RESUME

** ☺ 探索木が浅くなり高速化

[[png:macro2/search.0]]

#+BEGIN_RESUME
The benefit of using macros is a speedup.
this figure shows the search space of a planning problem, where the macros
are shown in dotted lines.
#+END_RESUME

*** ☺ 探索木が浅くなり高速化

[[png:macro2/search.1]]

#+BEGIN_RESUME
Thanks to the added macros, the goal can be found in 2 steps, compared to 3
steps in the red solution, in the original domain.
If the macro is long, it achieves a larger jump and speedup.
#+END_RESUME

** ☹ 探索木の幅が増える

[[png:macro2/search.2]]

#+BEGIN_ALIGNRIGHT
→ 無駄なマクロが沢山あると遅くなる
#+END_ALIGNRIGHT

#+BEGIN_RESUME
However, there is also several drawbacks.
First, macros increase the branching factor.
In this example, at the initial state,
the number of edges have increased from 3 to 4,
and it may increase the memory usage.
#+END_RESUME

** マクロオペレータの学習

EBL Explanation-Based Learning --- 「使えるマクロ」を訓練問題から学習する

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN4
+ 簡単な練習問題 :: 手紙を出しなさい

+ 練習プラン :: 

     文面を書く
     
     送り先住所を書く
     
     切手を手紙に貼る
     
     手紙を持つ
     
     ポストを探す
     
     ポストまで歩く
     
     手の中の物体を投函

#+END_SPAN4
#+BEGIN_SPAN4
+ 学習したマクロ ::
     *マクロ1(X,Y)*:
     
     　XをYに貼る
     
     　Yを持つ
     
     *マクロ2(X)*:

     　Xを探す
     
     　Xまで歩く
#+END_SPAN4
#+BEGIN_SPAN4
+ 難しい問題 :: 確定申告をしなさい
+ 解答例 :: 
     領収書を集める
     
     ...
     
     マクロ1(切手,封筒)
     
     マクロ2(ポスト)
     
     ...
     
#+END_SPAN4
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

** プランニングにおける Utility Problem

 + ゴミマクロが探索を遅くする ::

      例: *手紙* を *封筒* に貼る + *封筒* を持つ --- 引数が適切でない

 + 過学習がおこる ::

      一見良く見えたマクロ → 特定の状況でしか使えないものだった

 + 使えるマクロがどれか事前に解らない ::

      例: *封筒* は練習問題には含まれないシンボル

** 参考:様々なマクロフィルタリング手法がある

#+BEGIN_SMALLER
+ Macro Length limit -- 長さの制限 (よく使われる)
+ MacroFF (Botea, Muller, Shaeffer 2005)
  + Component Abstraction
  + Occurrence points + Bonus 
+ Wizard (Neuton et. al. 2007)
  + 遺伝的アルゴリズムでマクロを学習
+ Marvin (Coles et. al. 2004;2007)
  + 実行時に動的にマクロを学習
+ MUM (Chrpa et. al. 2014)
  + Outer Entanglement
+ BLOMA (Chrpa, Siddiqui 2015)
  + Block Deordering
#+END_SMALLER

* Lisp とプランニングにおけるUtility Problem の比較

*Lisp* におけるユーティリティ

+ ユーティリティは人が書いてくれる
  + →機械的に自動で発見・学習するよりも簡単に見える。
  + →一見関連が無いように見えるが...
+ Alexandria が 全然更新されない理由は?
  + ← 知らない第三者の書いたマクロが本当に使えるのか、 *評価が難しい*
  + ← *新機能の追加に躊躇する (保守的)*
  + ← いつの時代も、人間の一番大きなコストは *コミュニケーションコスト*
    + (人類 = プログラムを自動生成する分散並列探索アルゴリズム)
  + *Gmail,SNSのような自動フィルタリング・サジェスト機能が必要*
+ Quicklisp が流行った理由は?
  + Zach が毎月 *ある程度* の質を保ってくれているから！
  + (*ある程度* とは?)

* 手法

3346の QuickLisp システムを全てロードする
#+BEGIN_ALIGNRIGHT
#+BEGIN_SMALLER
参考: [[http://g000001.cddddr.org/3610010400][#:g1: Quicklisp全部入りコアを作ろう]]
#+END_SMALLER
#+END_ALIGNRIGHT

全パッケージのfbound シンボルを集める

名前でソートして再実装を見つける

時間的都合で出来なかったが、もう少したったらやりたいこと:

✘ swank-xref で何回参照されているかを調べる

✘ Lisp のマクロを学習できるか?

* 名前でソートして再実装を見つける

一回目, remove-duplicate が遅すぎて失敗 << シンボルが30万個ぐらいあった

二回目: hashtable実装で

#+BEGIN_SRC lisp
(ql:quickload '(:iterate :eazy-gnuplot))
(use-package '(:iterate :eazy-gnuplot))

(defparameter *all-symbols*
  (let (acc)
    (do-all-symbols (s acc)
      (when (fboundp s) (push s acc)))))

(defparameter *all-names*
  (make-hash-table :test #'equal))

(defparameter *histogram*
  (sort (hash-table-alist *all-names*) #'> :key #'cdr))

(with-plots (s)
  (gp-setup :output "img/histogram.png")
  (plot (lambda () (iter (for (name . count) in *histogram*) (print count)))))
#+END_SRC

# (sort (hash-table-alist *all-names*) #'> :key #'cdr)
# (with-open-file (*standard-output* "hist2" :direction :output :if-does-not-exist :create :if-exists :supersede) (print (sort (hash-table-alist *all-names*) #'> :key #'cdr)) nil)

** 結果

ロングテール!

[[png:static/histogram]]

** 内訳

なぜこんなに... (急ぎだったのであまり細かくは見れていない)

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
#+BEGIN_SMALLER
#+BEGIN_SRC lisp
("NAME" . 69)
("ENSURE-LIST" . 52)
("WITH-GENSYMS" . 49)
("TEST/ALL" . 48)
("WHEN-LET" . 43)
("AIF" . 37)
("TEST" . 36)
("+" . 36)
("-" . 35)
("SIZE" . 34)
("TIME" . 34)
("*" . 33)
("RUN" . 32)
("CLOSE" . 32)
("MESSAGE" . 30)
("LOG" . 30)
("LENGTH" . 30)
#+END_SRC
#+END_SMALLER
#+END_SPAN6

#+BEGIN_SPAN6
#+BEGIN_SMALLER
#+BEGIN_SRC lisp
("/" . 29)
("EXPT" . 29)
("=" . 29)
("WITH-UNIQUE-NAMES" . 29)
("OPEN" . 28)
(">" . 28)
("<" . 28)
("UNION" . 28)
("ONCE-ONLY" . 28)
("AWHEN" . 28)
("COS" . 27)    ; wtf??
("SIN" . 27)    ; wtf??
("SQRT" . 27)
("TAN" . 27)
("<=" . 27)
("TEXT" . 27)
("STRING" . 27)
("MAX" . 27)
("INTERSECTION" . 27)
(">=" . 27)
("FLATTEN" . 26)
("DEFCONSTANT" . 26)
("WRITE" . 26)
("CLASS-NAME" . 26)
("MAP" . 26)
("COMPOSE" . 25)
#+END_SRC
#+END_SMALLER
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

# * swank-xref で何回参照されているかを調べる : *結果*
# 
# * Lisp のマクロを学習できるか?
# 
# 構文木からのパターンマッチング
# 
# これは普通に難しそうなので保留します。

* まとめ

Common Lisp のユーティリティ問題について話した。

プランニングでのユーティリティ問題について話した。

いつの時代も、人間の一番大きなコストは *コミュニケーションコスト*

*Gmail,SNSのような自動フィルタリング・サジェスト機能が必要*

---- *実験*:

Quicklisp ライブラリ中のシンボルをソートして再実装を見つけた。

✘ swank-xref で何回参照されているかを調べられなかった。

✘ Lisp のマクロを学習できなかった。

---- *Future work*:

全ライブラリを読み込んで, どれだけの reputation を得ているかを調べる。

reputation によってユーティリティをランク付けし、quicklisp リリースごとに動的に更新する。

使われないユーティリティは消される! 流行りのユーティリティは入ってくる!



